# streamlit_app.py
# ---
# "Beta Hunt" â€“ classroom leaderboard app for an MBA/Finance exercise
# Students submit three stocks: (i) beta near 0, (ii) beta near 1, (iii) highest beta.
# They enter the betas and upload proof screenshots. A real-time leaderboard ranks results.
#
# Persistence uses Supabase (Postgres + Storage). Configure via Streamlit secrets.
# If you prefer Google Sheets instead, see the README section at the bottom of this file.
#
# ------------------------------
# SETUP INSTRUCTIONS (short)
# 1) Create a free Supabase project â†’ copy the Project URL and anon key into st.secrets:
#    [supabase]
url = "https://osbicvjsiptksuqkdwyt.supabase.co"
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9zYmljdmpzaXB0a3N1cWtkd3l0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkzMzExOTIsImV4cCI6MjA3NDkwNzE5Mn0.ys3Fba-I8RsU9oSr6ZfVjIj2BE3OPJ4CjgbfGdXt4o4"
bucket = "screenshots"   # create a public bucket with this name in Supabase Storage
table = "submissions"     # create a table with the schema below
admin_passphrase = "changeme"  # optional, for admin-only tools
#
# 2) In Supabase SQL editor, create the table:
#    CREATE TABLE IF NOT EXISTS public.submissions (
#      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#      created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
#      team TEXT NOT NULL,
#      student_name TEXT,
#      email TEXT,
#      stock0 TEXT,      beta0 DOUBLE PRECISION,
#      stock1 TEXT,      beta1 DOUBLE PRECISION,
#      stock_hi TEXT,    beta_hi DOUBLE PRECISION,
#      shot0_url TEXT, shot1_url TEXT, shothi_url TEXT,
#      notes TEXT
#    );
#    -- Recommended: one active row per team (latest wins). You can also add a unique constraint on (team, created_at) if you prefer historical tracking.
#
# 3) In Storage, create a public bucket named "screenshots".
#
# 4) Deploy this file to Streamlit Community Cloud.
# ------------------------------

import io
save_submission(
team=team,
student_name=student_name,
email=email,
row={"stock0": stock0, "beta0": b0, "stock1": stock1, "beta1": b1, "stock_hi": stock_hi, "beta_hi": bhi, "notes": notes},
files={"shot0": shot0, "shot1": shot1, "shothi": shothi},
)
st.success("Submitted âœ”")
try:
st.rerun()
except Exception:
st.experimental_rerun()


with leaderboard_tab:
st.subheader("Live leaderboard")
if st.button("ðŸ”„ Refresh leaderboard"):
try:
st.rerun()
except Exception:
st.experimental_rerun()
st.caption("The latest submission per team counts toward the ranking.")


rows = fetch_latest_by_team()
scores = compute_scores(rows)


c1, c2, c3 = st.columns(3)
with c1:
st.markdown("### ðŸ¥‡ Closest to 0")
data = [{"Rank": i+1, "Team": r["team"], "Stock": r.get("stock0"), "Beta": r.get("beta0"), "Error": round(r.get("err0"), 4) if r.get("err0") is not None else None} for i, r in enumerate(scores["near0"][:10])]
st.dataframe(data, use_container_width=True, hide_index=True)
with c2:
st.markdown("### ðŸ¥ˆ Closest to 1")
data = [{"Rank": i+1, "Team": r["team"], "Stock": r.get("stock1"), "Beta": r.get("beta1"), "Error": round(r.get("err1"), 4) if r.get("err1") is not None else None} for i, r in enumerate(scores["near1"][:10])]
st.dataframe(data, use_container_width=True, hide_index=True)
with c3:
st.markdown("### ðŸ¥‰ Highest beta")
data = [{"Rank": i+1, "Team": r["team"], "Stock": r.get("stock_hi"), "Beta": r.get("beta_hi")} for i, r in enumerate(scores["high"][:10])]
st.dataframe(data, use_container_width=True, hide_index=True)


st.markdown("---")
st.markdown("### Overall (sum of ranks)")
data = [{"Rank": i+1, "Team": r["team"], "Near 0 rank": r.get("rank0"), "Near 1 rank": r.get("rank1"), "High beta rank": r.get("rankh"), "Total": r.get("total_rank")} for i, r in enumerate(scores["overall"][:20])]
st.dataframe(data, use_container_width=True, hide_index=True)


with admin_tab:
st.subheader("Admin tools")
_, table_name, admin_pw = get_storage_cfg()
entered = st.text_input("Admin passphrase", type="password")
if admin_pw and entered == admin_pw:
st.success("Admin mode enabled")
sb = get_client()
res = sb.table(table_name).select("*").order("created_at", desc=True).execute()
all_rows = res.data or []
st.download_button(
label="Download all submissions (CSV)",
data="\n".join([",".join([str(x.get("id", "")), str(x.get("created_at", "")), x.get("team", ""), x.get("student_name", ""), x.get("email", ""), x.get("stock0", ""), str(x.get("beta0", "")), x.get("stock1", ""), str(x.get("beta1", "")), x.get("stock_hi", ""), str(x.get("beta_hi", "")), x.get("shot0_url", ""), x.get("shot1_url", ""), x.get("shothi_url", ""), x.get("notes", "")]) for x in ([{"id":"id","created_at":"created_at","team":"team","student_name":"student_name","email":"email","stock0":"stock0","beta0":"beta0","stock1":"stock1","beta1":"beta1","stock_hi":"stock_hi","beta_hi":"beta_hi","shot0_url":"shot0_url","shot1_url":"shot1_url","shothi_url":"shothi_url","notes":"notes"}] + all_rows)]).encode("utf-8"),
file_name=f"beta_hunt_export_{int(time.time())}.csv",
mime="text/csv",
)
st.markdown("#### Delete a team (danger zone)")
team_to_delete = st.text_input("Team to delete")
if st.button("Delete team submissions") and team_to_delete.strip():
sb.table(table_name).delete().eq("team", team_to_delete.strip()).execute()
st.success(f"Deleted submissions for '{team_to_delete}'.")
else:
st.info("Enter the admin passphrase to access exports and deletion tools.")
